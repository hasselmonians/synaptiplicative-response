function [responses, V, pulse_AMPA, pulse_NMDA] = simulate(x)
  % this function is used to compute the voltage-response amplitude
  % of two pulses, and then both together, to check for supralinearity

  %% Arguments:
  %   x: the xolotl object generated by model()
  %% Outputs:
  %   responses: a 3x1 vector containing the response heights for the three conditions
  %   V: an n x 3 vector containing the membrane potential
  %     for the Dendritic compartment for each trial

  % compute the steady-state
  % this has to be done here because the parameters change each time
  x = setSteadyState(x, -90);

  % preallocate output variables
  responses   = zeros(3, 1);
  V           = zeros(x.t_end / x.dt, 3);

  % useful variables
  comps       = x.find('compartment');

  % set up a presynaptic AMPAergic waveform pulse
  pulseWidth_AMPA   = round(90 / x.dt); % time steps
  pulseHeight_AMPA  = 60; % mV
  pulseStart_AMPA   = round(2 / x.dt); % time steps
  pulseStop_AMPA    = pulseStart_AMPA + pulseWidth_AMPA; % time steps
  pulse_AMPA        = -90 * ones(length(V), 1);
  pulse_AMPA(pulseStart_AMPA:pulseStop_AMPA) = pulseHeight_AMPA;

  % set up presynaptic NMDAergic waveform pulse
  pulseWidth_NMDA   = round(2 / x.dt);
  pulseHeight_NMDA  = 60;
  pulseStart_NMDA   = round(60 / x.dt);
  pulseStop_NMDA    = pulseStart_NMDA + pulseWidth_NMDA;
  pulse_NMDA        = -90 * ones(length(V), 1);
  pulse_NMDA(pulseStart_NMDA:pulseStop_NMDA) = pulseHeight_NMDA;

  [response(1), V(:,1)]   = simulate_core(x, comps, 1, pulse_AMPA, pulse_NMDA);
  [response(2), V(:,2)]   = simulate_core(x, comps, 2, pulse_AMPA, pulse_NMDA);
  [response(3), V(:,3)]   = simulate_core(x, comps, 3, pulse_AMPA, pulse_NMDA);
