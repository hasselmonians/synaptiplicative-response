%% Load the data

% we expect all_data, all_params, gmax, param_names, and x to be contained within
load('responses.mat')

% if not, load some defaults

if ~exist('param_names', 'var')
  param_names = x.find('Dendrite*gmax');
end

if ~exist('x', 'var')
  x = model();
else
  x.rebase();
end

%% Gather the responses
% either loaded from a file, or generated by xgrid

% NOTE: responses should be sorted and exist in a 301x301x3 tensor

%% Responses as a function of synaptic weights

figure('outerposition',[100 100 1000 800],'PaperUnits','points','PaperSize',[1000 800]); hold on
imagesc(gmax, gmax, responses(:, :, 3));
xlabel('g_{max} (\mu S)')
ylabel('g_{max} (\mu S)')
title('responses')
c = colorbar;
c.Label.String = 'Response height (mV)';
figlib.pretty()

figure('outerposition',[100 100 1000 800],'PaperUnits','points','PaperSize',[1000 800]); hold on
imagesc(gmax, gmax, responses(:, :, 3) - responses(:, :, 1) .* responses(:, :, 2));
xlabel('g_{max} (\mu S)')
ylabel('g_{max} (\mu S)')
title('multiplicative difference')
c = colorbar;
c.Label.String = 'Response height (mV)';
figlib.pretty()

figure('outerposition',[100 100 1000 800],'PaperUnits','points','PaperSize',[1000 800]); hold on
imagesc(gmax, gmax, responses(:, :, 3) - responses(:, :, 1) - responses(:, :, 2));
xlabel('g_{max} (\mu S)')
ylabel('g_{max} (\mu S)')
title('additive difference')
c = colorbar;
c.Label.String = 'Response height (mV)';
figlib.pretty()

figure('outerposition',[100 100 1000 800],'PaperUnits','points','PaperSize',[1000 800]); hold on
imagesc(gmax, gmax, responses(:, :, 3) ./ (responses(:, : ,1) + responses(:, : ,2)));
xlabel('g_{max} (\mu S)')
ylabel('g_{max} (\mu S)')
title('nonlinearity factor')
c = colorbar;
c.Label.String = 'Response height (mV)';
figlib.pretty()

%% Responses along the diagonal

responses_diag = zeros(length(gmax), 3);
for ii = 1:length(gmax)
  responses_diag(ii, :) = responses(ii, ii, :);
end

% set up a colormap for the next figure
C = colormaps.linspecer(4);

% plot R_1, R_1 + R_2, R_1 * R_2, and R_3 together on one figure
% as a function of the maximal conductance
figure('outerposition',[100 100 1000 800],'PaperUnits','points','PaperSize',[1000 800]); hold on
plot(gmax, responses_diag(:, 1), 'Color', C(1, :))
plot(gmax, responses_diag(:, 1) + responses_diag(:, 2), 'Color', C(2, :))
plot(gmax, responses_diag(:, 1) .* responses_diag(:, 2), 'Color', C(3, :))
plot(gmax, responses_diag(:, 3), 'Color', C(4, :))
legend({'R_1', 'R_1 + R_2', 'R_1 * R_2', 'R_3',}, 'Location', 'EastOutside')
xlabel('g_{max} (\mu S)')
ylabel('response (mV)')
figlib.pretty()

%% Plot selected time series

params = [5 5; 10 5; 5 10; 10 10];

for ii = 1:size(params, 1)
  x.set(param_names, params(ii, :));
  plotResponses(x);
  % add a title based on the model parameters
  title([mat2str(params(ii, :))])
end
